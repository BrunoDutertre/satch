/*------------------------------------------------------------------------*/
//   Copyright (c) 2021, Armin Biere, Johannes Kepler University Linz     //
/*------------------------------------------------------------------------*/

#ifndef _satch_h_INCLUDED
#define _satch_h_INCLUDED

// This header file defines the API of the library of the SAT solver SATCH.
// All functions are implemented in 'satch.c' except for the last three
// returning build information and which are implemented in 'config.c'.
// Parser and witness printer implemented in 'main.c' are also not
// considered part of the library code.

/*------------------------------------------------------------------------*/

#include <stdio.h>

/*------------------------------------------------------------------------*/

// SAT competition conformant exit codes used for 'satch_solve'.

#define UNKNOWN 0
#define SATISFIABLE 10
#define UNSATISFIABLE 20

/*------------------------------------------------------------------------*/

// Functions with IPASIR semantics.

struct satch;

struct satch *satch_init (void);	// Initialize solver.
void satch_release (struct satch *);	// Release solver.

void satch_add (struct satch *, int);	// Add literal of clause.
int satch_solve (struct satch *);	// Solve instance.
int satch_val (struct satch *, int);	// Get value of literal.

/*------------------------------------------------------------------------*/

// Additional API functions.

// Allocate and activate the given number of variables.
//
void satch_reserve (struct satch *, int max_var);

/*------------------------------------------------------------------------*/

// By default the library does not print any messages (the solver binary
// however does switch on 'verbose' messages by default unless '-q' is
// specified). There are four non-zero levels of verbose messages.
//
void satch_set_verbose_level (struct satch *, int level);

#ifndef NDEBUG
void satch_enable_logging_messages (struct satch *);
#endif

void satch_trace_proof (struct satch *, FILE *);

/*------------------------------------------------------------------------*/

// Return the largest active variable.
//
int satch_maximum_variable (struct satch *);

// Get process time used by the current process.
//
double satch_process_time (void);

// Print a nicely formatted 'c ---- [ <name> ] ---- ....' section header.
//
void satch_section (struct satch *, const char *name);

// Print statistics and resource usage.
//
void satch_statistics (struct satch *);

/*------------------------------------------------------------------------*/

// Record and compute time spent in parsing.

void satch_start_profiling_parsing (struct satch *);
double satch_stop_profiling_parsing (struct satch *);

/*------------------------------------------------------------------------*/

// These functions return build information are implemented in 'config.c'
// which in the default build process is automatically generated by
// 'mkconfig.sh'. They are only available if you link against the full
// library. If you link against 'satch.o' only, then they are missing.

const char *satch_version (void);	// Version string.
const char *satch_compile (void);	// Build information.
const char *satch_identifier (void);	// GIT hash.

/*------------------------------------------------------------------------*/

#endif
